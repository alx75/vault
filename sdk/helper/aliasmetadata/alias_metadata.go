package aliasmetadata

import (
	"fmt"

	"github.com/hashicorp/vault/sdk/framework"
	"github.com/hashicorp/vault/sdk/helper/strutil"
	"github.com/hashicorp/vault/sdk/logical"
)

// Fields is for configuring a back-end's available
// default and additional fields. These are used for
// providing a verbose field description, and for parsing
// user input.
type Fields struct {
	// Default is a list of the default fields that should
	// be included if a user sends "default" in their list
	// of desired fields. These fields should all have a
	// low rate of change because each change can incur a
	// write to storage.
	Default []string

	// AvailableToAdd is a list of fields not included by
	// default, that the user may include.
	AvailableToAdd []string
}

// FieldName is the user-facing name for the field.
const FieldName = "alias_metadata"

// FieldSchema takes the default and additionally available
// fields, and uses them to generate a verbose description
// regarding how to use the "alias_metadata" field.
func FieldSchema(fields *Fields) *framework.FieldSchema {
	return &framework.FieldSchema{
		Type:        framework.TypeCommaStringSlice,
		Description: description(fields),
		DisplayAttrs: &framework.DisplayAttributes{
			Name:  FieldName,
			Value: "default,field1,field2",
		},
		Default: []string{"default"},
	}
}

// NewHandler instantiates a Handler that can be embedded
// in your back-end config to help:
//   - Store the user's selected fields
//   - Parse and retrieve the user's input
//   - Populate alias metadata given the available data and the user's configuration
func NewHandler(fields *Fields) Handler {
	return &handler{
		fields: fields,
	}
}

// Handler is an interface for handling alias metadata.
type Handler interface {
	GetAliasMetadata() []string
	ParseAliasMetadata(data *framework.FieldData)
	PopulateDesiredAliasMetadata(auth *logical.Auth, fieldValues map[string]string)
}

type handler struct {
	// AliasMetadata is an explicit list of all the user's configured
	// fields that are being added to alias metadata. It will never
	// include the "default" parameter, and instead includes the actual
	// fields behind "default", if selected.
	AliasMetadata []string `json:"alias_metadata"`

	// fields is a list of the configured default and available
	// fields.
	fields *Fields
}

// GetAliasMetadata gets an explicit list of all the user's configured
// fields that are being added to alias metadata. It will never
// include the "default" parameter, and instead includes the actual
// fields behind "default", if selected.
func (h *handler) GetAliasMetadata() []string {
	return h.AliasMetadata
}

// TODO test when nothing is sent, vs "default", vs "default,field1", by hand externally
// ParseAliasMetadata takes a user's selected fields (or lack thereof),
// converts it to a list of explicit fields, and adds it to the handler
// for later storage.
func (h *handler) ParseAliasMetadata(data *framework.FieldData) {
	uniqueFields := make(map[string]bool)
	aliasMetadata := data.Get(FieldName).([]string)
	for _, field := range aliasMetadata {
		if field == "default" {
			for _, dfltField := range h.fields.Default {
				uniqueFields[dfltField] = true
			}
		}
		uniqueFields[field] = true
	}
	h.AliasMetadata = make([]string, len(uniqueFields))
	i := 0
	for fieldName := range uniqueFields {
		h.AliasMetadata[i] = fieldName
		i++
	}
}

func (h *handler) PopulateDesiredAliasMetadata(auth *logical.Auth, fieldValues map[string]string) {
	for fieldName, fieldValue := range fieldValues {
		if strutil.StrListContains(h.AliasMetadata, fieldName) {
			auth.Alias.Metadata[fieldName] = fieldValue
		}
	}
}

func description(fields *Fields) string {
	desc := "The metadata to include on the aliases generated by this plugin."
	if len(fields.Default) > 0 {
		desc += fmt.Sprintf(` '%s' are included when set to "default".`, fields.Default)
	}
	if len(fields.AvailableToAdd) > 0 {
		desc += fmt.Sprintf(" '%s' are available to add.", fields.AvailableToAdd)
	}
	desc += ` Not editing this field means the "default" fields are included.` +
		` Explicitly setting this field to empty overrides the "default" and means no alias metadata will be included.` +
		` Add fields by sending, "default,field1,field2".` +
		` We advise only including fields that change rarely because each change triggers a storage write.`
	return desc
}
